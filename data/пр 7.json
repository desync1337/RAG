[
  {
    "text": "",
    "page": 1,
    "fragment_id": "пр 7.pdf-p1-f1",
    "source": "пр 7.pdf"
  },
  {
    "text": "Практическая работа № 7 Написание программ для эмулятора ЭВМ «ЛамПанель » Тема: Написание программ для эмулятора ЭВМ «ЛамПанель» Цель:  для изучения принципов работы компьютера (процессор, ОЗУ, ПЗУ);  для начального изучения программирования на языке ассемблера;  для изучения операций с целыми числами, в том числа поразрядных логических опера - ций и сдвигов.",
    "page": 1,
    "fragment_id": "пр 7.pdf-p1-f2",
    "source": "пр 7.pdf"
  },
  {
    "text": "Программа -тренажёр «ЛамПанель» – это учебная модель компьютера, который управляет па- нелью лампочек.",
    "page": 1,
    "fragment_id": "пр 7.pdf-p1-f3",
    "source": "пр 7.pdf"
  },
  {
    "text": "Модель компьютера включает:  процессор,  оперативн ую память (ОЗУ),  постоянную память (ПЗУ)  устройство вывода – панель лампочек размером 8×16.",
    "page": 1,
    "fragment_id": "пр 7.pdf-p1-f4",
    "source": "пр 7.pdf"
  },
  {
    "text": "Справочник по языку ассемблера «ЛамПанель» Система команд процессора в тренажёре «ЛамПанель» – 16-ти -разрядная.",
    "page": 1,
    "fragment_id": "пр 7.pdf-p1-f5",
    "source": "пр 7.pdf"
  },
  {
    "text": "Программа для процессора составляется на языке ассе мблера , в котором каждая символьная команда соответствует одной (числовой) команде процессора. Программа набирается в окне «Программа».",
    "page": 1,
    "fragment_id": "пр 7.pdf-p1-f6",
    "source": "пр 7.pdf"
  },
  {
    "text": "Программу можно сохранять в виде файла на диске, а потом загружать в память из файла (с помощью меню «Файл»).",
    "page": 1,
    "fragment_id": "пр 7.pdf-p1-f7",
    "source": "пр 7.pdf"
  },
  {
    "text": "При запуск е (по клавише F9) набранная программа транслируется (переводится в машинные коды, которые появляются в окне «Отладчик») и начинается ее выполнение.",
    "page": 1,
    "fragment_id": "пр 7.pdf-p1-f8",
    "source": "пр 7.pdf"
  },
  {
    "text": "В окне «Данные в памяти» показывается содержимое оперативной памяти, в которой располо - жены программа и данные (принцип однородности).",
    "page": 1,
    "fragment_id": "пр 7.pdf-p1-f9",
    "source": "пр 7.pdf"
  },
  {
    "text": "Структура процессора тренажёра «ЛамПанель» Процессор имеет 4 регистра общего назначения (РОН), которые называются R0, R1, R2, R3.",
    "page": 1,
    "fragment_id": "пр 7.pdf-p1-f10",
    "source": "пр 7.pdf"
  },
  {
    "text": "Кроме того, есть еще три внутренних регистра, недоступные программисту (но видимые в окне про - граммы):  PC (англ. program counter ) – программный счетчик, счётчик команд, указывающий на следую - щую выполняемую команду;  SP (англ. stack pointer ) – указатель стека, адрес вершины стека; стек размещается в нижней ча - сти оперативной памяти, его содержимое можно просмотреть в нижней части окна «Данные в памяти»;  PS (англ. processor state ) – регистр состояния процессора; используются только три младших бита: 0 – бит N (англ. negative , отрицательный результат), 1 – бит Z (англ. zero, нулевой резуль - тат) и 2 – бит C (англ. carry , перенос).",
    "page": 1,
    "fragment_id": "пр 7.pdf-p1-f11",
    "source": "пр 7.pdf"
  },
  {
    "text": "В качестве устройства вывода используется панель лампочек размером 8×16. Каждый ряд лампочек управляется через отдельный порт вывода.",
    "page": 2,
    "fragment_id": "пр 7.pdf-p2-f1",
    "source": "пр 7.pdf"
  },
  {
    "text": "Всего используется восемь 16-разрядных портов с именами P0, P1, P2, P3, P4, P5, P6 и P7.",
    "page": 2,
    "fragment_id": "пр 7.pdf-p2-f2",
    "source": "пр 7.pdf"
  },
  {
    "text": "Постоянное запоминающее устройство (ПЗУ) предназначено для хранения системных подпро - грамм. Код ПЗУ загружается при старте программы из текстового файла, поэтому пользователь мо - жет изменять содержимое ПЗУ: добавлять, удалять и изменять любые процедуры.",
    "page": 2,
    "fragment_id": "пр 7.pdf-p2-f3",
    "source": "пр 7.pdf"
  },
  {
    "text": "Основные правило написания программ:  Программа должна заканчиваться командой stop.",
    "page": 2,
    "fragment_id": "пр 7.pdf-p2-f4",
    "source": "пр 7.pdf"
  },
  {
    "text": "Например, самая простая программа: stop  Команда NOP ( no operation, нет операции) – это пустая команда, она ничего не делает.",
    "page": 2,
    "fragment_id": "пр 7.pdf-p2-f5",
    "source": "пр 7.pdf"
  },
  {
    "text": " Комментарий начинается символом «точка с запятой »: nop ; пустая команда, stop Инструменты отладки программы Программу можно выполнить всю целиком (клавиша F9) или в пошаговом режиме (F8).",
    "page": 2,
    "fragment_id": "пр 7.pdf-p2-f6",
    "source": "пр 7.pdf"
  },
  {
    "text": "В по - шаговом режиме в окне отладчика зелёным цветом выделяется текущая строка, которая будет вы - полнена при следую щем нажатии F8.",
    "page": 2,
    "fragment_id": "пр 7.pdf-p2-f7",
    "source": "пр 7.pdf"
  },
  {
    "text": "Сочетание клавиш Ctrl+F8 позволяет отменить только что сделанную команду. Клавиша F7 (вместо F8) позволяет войти в подпрограмму и выполнить ее пошагово (см. раз - дел «Подпрограммы» ниже).",
    "page": 2,
    "fragment_id": "пр 7.pdf-p2-f8",
    "source": "пр 7.pdf"
  },
  {
    "text": "Если установить курсор в какую -то строчку программы и нажать клавишу F4, программа бу - дет выполняться до этой строчки и затем остановится. Движок «Скорость» изменяет скорость выполнения программы.",
    "page": 2,
    "fragment_id": "пр 7.pdf-p2-f9",
    "source": "пр 7.pdf"
  },
  {
    "text": "Все команды отладки включены в меню «Программа». Кроме того, они могут выполняться с помощью кнопок панели инструментов: Трансляция в машинные коды без выполнения (Ctrl+F9).",
    "page": 2,
    "fragment_id": "пр 7.pdf-p2-f10",
    "source": "пр 7.pdf"
  },
  {
    "text": "Трансляция и выполнение (F9). Выполнить один шаг (F8). Отменить один шаг (Ctrl+F8). Войти в подпрограмму (F7). Выполнить до курсора (F4).",
    "page": 2,
    "fragment_id": "пр 7.pdf-p2-f11",
    "source": "пр 7.pdf"
  },
  {
    "text": "С помощью меню «Регистры» можно изме нить значения любого регистра во время выполне - ния программы в пошаговом режиме.",
    "page": 2,
    "fragment_id": "пр 7.pdf-p2-f12",
    "source": "пр 7.pdf"
  },
  {
    "text": "Работа с регистрами и портами Для простейшей обработки данных можно использовать 4 регистра процессора и 8 портов ламповой панели.",
    "page": 2,
    "fragment_id": "пр 7.pdf-p2-f13",
    "source": "пр 7.pdf"
  },
  {
    "text": "Основные операции:  записать данные в регист р, например, ассемблер псевдокод mov 1234, R0 R0:=1234 16 Все числа записываются в шестнадцатеричной системе счисления.",
    "page": 2,
    "fragment_id": "пр 7.pdf-p2-f14",
    "source": "пр 7.pdf"
  },
  {
    "text": " скопировать значение из одного регистра в другой, например, ассемблер псевдокод mov R0, R1 R1:=R0  вывести значение регистра в порт ассемблер псевдокод out R0, P1 P1:=R0  прочитать значение из порта в регистр ассемблер псевдокод in P2, R0 R0:=P2 Пример программы : ассемблер псевдокод mov 1234, R0 mov R0, R2 R0:= 1234 16 R2:= R0",
    "page": 2,
    "fragment_id": "пр 7.pdf-p2-f15",
    "source": "пр 7.pdf"
  },
  {
    "text": "out R2, P1 stop P1:= R2 стоп Арифметические операции Арифметические операции могут выполняться с числами (константами) и значениями регистров.",
    "page": 3,
    "fragment_id": "пр 7.pdf-p3-f1",
    "source": "пр 7.pdf"
  },
  {
    "text": "Результат записывается по адресу второго операнда -регистра (это не может быть число).",
    "page": 3,
    "fragment_id": "пр 7.pdf-p3-f2",
    "source": "пр 7.pdf"
  },
  {
    "text": " сложение ассемблер псевдокод add 1, R1 add R2, R3 R1:= R1 + 1 R3:= R3 + R2  вычитание ассемблер псевдокод sub 2, R1 sub R2, R3 R1:= R1 - 2 R3:= R3 - R2  умножение ассемблер псевдокод mul 5, R1 mul R2, R3 R1:= R1 * 5 R3:= R3 * R2  деление ассемблер псевдокод div 12, R1 div R2, R3 R1:= R1 div 12 R3:= R3 div R2 Логические операции Логические операции могут выполняться с числами (константами) и знач ениями регистров.",
    "page": 3,
    "fragment_id": "пр 7.pdf-p3-f3",
    "source": "пр 7.pdf"
  },
  {
    "text": "Резуль - тат записывается по адресу второго операнда -регистра (это не может быть число).",
    "page": 3,
    "fragment_id": "пр 7.pdf-p3-f4",
    "source": "пр 7.pdf"
  },
  {
    "text": " отрицание («НЕ») ассемблер псевдокод not R1 R1:= not R1  логическое умножение («И») ассемблер псевдокод and R0, R1 and 1234, R1 R1:= R1 and R0 R1:= R1 and 1234 16  логическое сложение («ИЛИ») ассемблер псевдокод or R0, R1 or 1234, R1 R1:= R1 or R0 R1:= R1 or 1234 16  сложение по модулю 2 («исключающее ИЛИ») ассемблер псевдокод xor R0, R1 xor 1234, R1 R1:= R1 xor R0 R1:= R1 xor 1234 16 Операции сдвига В командах сдвига первый операнд – это величина сдвига (от 1 до 1016), а второй – регистр.",
    "page": 3,
    "fragment_id": "пр 7.pdf-p3-f5",
    "source": "пр 7.pdf"
  },
  {
    "text": " логический сдвиг влево и вправо ассемблер псевдокод shl 2, R1 shr F, R1 R1:= R1 shl 2 16 R1:= R1 shr F16  арифметический сдвиг вправо ассемблер псевдокод sar 2, R1 R1:= R1 sar 216  циклический сдвиг влево и вправо ассемблер псевдокод rol 2, R1 ror F, R1 R1:= R1 rol 2 16 R1:= R1 ror F16",
    "page": 3,
    "fragment_id": "пр 7.pdf-p3-f6",
    "source": "пр 7.pdf"
  },
  {
    "text": "",
    "page": 4,
    "fragment_id": "пр 7.pdf-p4-f1",
    "source": "пр 7.pdf"
  },
  {
    "text": " циклический сдвиг влево и вправо через бит переноса ассемблер псевдокод rcl 2, R1 rcr F, R1 R1:= R1 rcl 2 16 R1:= R1 rcr F16 Опера ции: метки, сравнения и переходы Команды перехода используются для выполнения разветвляющихся алгоритмов.",
    "page": 4,
    "fragment_id": "пр 7.pdf-p4-f2",
    "source": "пр 7.pdf"
  },
  {
    "text": "Различают безусловный переход ( переходить всегда ) и условные переходы ( переход при выполнении какого -то условия ). Чтобы обозначить место перехода, нео бходимо создать метку.",
    "page": 4,
    "fragment_id": "пр 7.pdf-p4-f3",
    "source": "пр 7.pdf"
  },
  {
    "text": "Метка – это произвольное имя, за которым следует двоеточие. После двоеточия не должно быть никаких символов (метка – это отдельная строка программы).",
    "page": 4,
    "fragment_id": "пр 7.pdf-p4-f4",
    "source": "пр 7.pdf"
  },
  {
    "text": "Безусловный переход имеет формат jmp метка Пример программы (бесконечный цикл): Условные переходы зависят от битов состояния процессора, которые определяются результатом по- следней операции: Пример программы (цикл из 5 шагов): ассемблер псевдокод mov 5, R1 qq: sub 1, R1 jnz qq R1:=5 нц пока R1<> 0 R1:= R1 - 1 кц Существует команда сравнения, которая изменяет только биты состояния процессора: ассемблер значение cmp 2, R1 cmp R0, R1 установка битов состояния по значению 216-R1 установка битов состояния по значению R0-R1 Приме р программы: ассемблер псевдокод cmp 5, R0 jnz aaa add 1, R0 aaa: если R0=5 то R0:= R0 + 1 все Подпрограммы Подпрограммы – это вспомогательные алгоритмы, которые можно вызывать по имени.",
    "page": 4,
    "fragment_id": "пр 7.pdf-p4-f5",
    "source": "пр 7.pdf"
  },
  {
    "text": "В языке ас - семблера имя подпрограммы – это метка.",
    "page": 4,
    "fragment_id": "пр 7.pdf-p4-f6",
    "source": "пр 7.pdf"
  },
  {
    "text": "Для вызова подпр ограммы используется команда call метка Подпрограмма должна заканчиваться командой возврата из подпрограммы ret Подпрограммы располагаются в программе ниже основной программы, после команды stop.",
    "page": 4,
    "fragment_id": "пр 7.pdf-p4-f7",
    "source": "пр 7.pdf"
  },
  {
    "text": "Пример программы, которая использует подпрограмму divM od для деления с остатком: ассемблер псевдокод mov 1234, R0 mov 10, R1 call divMod stop divMod: R0:= 1234 16 R1:= 10 16 вызвать divMod стоп qq: nop jmp qq jge метка jl метка jnz метка jz метка jle метка jg метка ; если больше или равно ; если меньше ; если не нуль ; если нуль ; если меньше или равно ; если больше",
    "page": 4,
    "fragment_id": "пр 7.pdf-p4-f8",
    "source": "пр 7.pdf"
  },
  {
    "text": "",
    "page": 5,
    "fragment_id": "пр 7.pdf-p5-f1",
    "source": "пр 7.pdf"
  },
  {
    "text": "mov R0, R2 div R1, R0 mul R0, R1 sub R1, R2 mov R2, R1 ret R2:= R0 R0:= R0 div R1 R1:= R1 * R0 R2:= R2 – R1 R1:= R2 возврат Чтобы при отладке выполнять по шагам не только основную программу, но и подпрограмму, при выполнении команды call нужно нажать не F8, а F7.",
    "page": 5,
    "fragment_id": "пр 7.pdf-p5-f2",
    "source": "пр 7.pdf"
  },
  {
    "text": "Работа со стеком Стек – это структура типа LIFO (англ. Last In – First Out, последним пришел – первым ушел ).",
    "page": 5,
    "fragment_id": "пр 7.pdf-p5-f3",
    "source": "пр 7.pdf"
  },
  {
    "text": "В со - временных компьютерах стек размещается в памяти, специальный регистр SP (англ. stack pointer ) указывает на начало стека.",
    "page": 5,
    "fragment_id": "пр 7.pdf-p5-f4",
    "source": "пр 7.pdf"
  },
  {
    "text": "Для работы со стеком используются всего две команды: ассемблер псевдокод push R0 pop R0 сохранить R0 в стеке «снять» данные с вершины стека в R0 Конечно, сохранять в стеке можно не только R0, но и другие регистры.",
    "page": 5,
    "fragment_id": "пр 7.pdf-p5-f5",
    "source": "пр 7.pdf"
  },
  {
    "text": "Стек используется:  для временного хранения данных  для хранения адресов возврата из подпрограмм  для размещения локальных переменных подпрограмм Пример программы (обмен значений регистров R0 и R1): ассемблер псевдокод push R0 push R1 pop R0 pop R1 R0 – в стек R1 – в стек со стека – в R0 (старое значение R1) со стека – в R1 (старое значение R0) Если подпрограмма использует какой -то регистр, которые не содержит исходные данные и не предназначен для записи результата, она должна сохранить его стеке при входе и восстановить ста - рое значение из стека при выходе.",
    "page": 5,
    "fragment_id": "пр 7.pdf-p5-f6",
    "source": "пр 7.pdf"
  },
  {
    "text": "Например: ассемблер псевдокод proc: push R0 ... pop R0 ret начало подпрограммы R0 – в стек основное тело подпрог раммы со стека – в R0 (старое значение R0) возврат из подпрограммы Заметьте, что подпрограмма, приведенная в предыдущем пункте, не совсем грамотно написана – она не сохраняет значение регистра R2, хотя «портит» его во время работы.",
    "page": 5,
    "fragment_id": "пр 7.pdf-p5-f7",
    "source": "пр 7.pdf"
  },
  {
    "text": "Вызов подпрограмм из ПЗ У ПЗУ в данной модели компьютера – это набор подпрограмм, каждая из которых заканчивается командой ret. Всего в ПЗУ может быть до 256 подпрограмм.",
    "page": 5,
    "fragment_id": "пр 7.pdf-p5-f8",
    "source": "пр 7.pdf"
  },
  {
    "text": "ПЗУ загружается при запуске тренажёра «ЛамПанель» из файла lampanel.rom , который дол - жен находиться в том ж е каталоге, что и сама программа.",
    "page": 5,
    "fragment_id": "пр 7.pdf-p5-f9",
    "source": "пр 7.pdf"
  },
  {
    "text": "Это обычный текстовый файл, который можно редактировать в редакторах типа Блокнота (если, конечно, вы понимаете, что вы делаете).",
    "page": 5,
    "fragment_id": "пр 7.pdf-p5-f10",
    "source": "пр 7.pdf"
  },
  {
    "text": "В настоящей версии в ПЗУ включены следующие подпрограммы: Номер Описание 0 Очистить все порты панели (выключить все лампочки). 1 Установит ь в FF16 все порты панели (включить все лампочки).",
    "page": 5,
    "fragment_id": "пр 7.pdf-p5-f11",
    "source": "пр 7.pdf"
  },
  {
    "text": "2 Записать значение R0 во все порты панели. 3 Прокрутить изображение на панели вниз. 4 Прокрутить изображение на панели вверх. 5 Вывести на панель массив данных, адрес которого находится в R0.",
    "page": 5,
    "fragment_id": "пр 7.pdf-p5-f12",
    "source": "пр 7.pdf"
  },
  {
    "text": "6 Выпол нить инверсию экрана (применить NOT ). 7 Операция «И» со всеми портами (R1 – маска). 8 Операция «ИЛИ» со всеми портами (R1 – маска).",
    "page": 5,
    "fragment_id": "пр 7.pdf-p5-f13",
    "source": "пр 7.pdf"
  },
  {
    "text": "9 Операция «исключающее ИЛИ» со всеми портами (R1 – маска). A16 Логический сдвиг влево всех портов (R1 – величина сдвига). B16 Логический сдвиг вправо всех портов (R1 – величина сдвига).",
    "page": 6,
    "fragment_id": "пр 7.pdf-p6-f1",
    "source": "пр 7.pdf"
  },
  {
    "text": "C16 Циклический сдвиг влево всех портов (R1 – величина сдвига). D16 Циклический сдвиг вправо всех портов (R1 – величина сдвига). E16 Арифметический сдвиг вправо всех портов (R1 – величина сдвига).",
    "page": 6,
    "fragment_id": "пр 7.pdf-p6-f2",
    "source": "пр 7.pdf"
  },
  {
    "text": "F16 Деление с остатком (R0:=R0 div R1, R1:=R0 mod R1). 1016 Вывод цифры на экран (R0 – цифра, R1 – позиция, от 0 до 2) 1116 Вывод числа из R0 на экран ( R1 – система счисления, от 2 до 16).",
    "page": 6,
    "fragment_id": "пр 7.pdf-p6-f3",
    "source": "пр 7.pdf"
  },
  {
    "text": "1216 Вывод числа из R0 на экран в десятичной системе счисления. 1316 Вывод числа из R0 на экран в шестнадцатеричной системе счисления.",
    "page": 6,
    "fragment_id": "пр 7.pdf-p6-f4",
    "source": "пр 7.pdf"
  },
  {
    "text": "Просмотреть содержимое ПЗУ можно с помощью пункта меню «Программа -Просмотр ПЗУ» или кнопки на панели инструментов.",
    "page": 6,
    "fragment_id": "пр 7.pdf-p6-f5",
    "source": "пр 7.pdf"
  },
  {
    "text": "Выделив какую -нибудь строчку в левой части окна, мы увидим справа текст выбранной подпрограммы и ее коды: Для вызова подпрограмм из ПЗУ нужно использовать команду: system номер_подпрограммы Пример программы: ассембле р псевдокод system 0 system 1 mov 123, R0 system 12 system 6 mov 1, R1 system A system B system 13 stop выключить панель включить все лампочки R0:= 123 16 вывести R0 в десятичной системе инверсия R1:= 1 ; величина сдвига сдвиг экрана влево сдвиг экрана вправо вывести R0 в шестнадцатеричной системе стоп Байтовые команды Все рассмотренные выше команды работают с 16 -битными данными (словами).",
    "page": 6,
    "fragment_id": "пр 7.pdf-p6-f6",
    "source": "пр 7.pdf"
  },
  {
    "text": "Часто, например, при обработке текстов, нужно использовать однобайтные данные.",
    "page": 6,
    "fragment_id": "пр 7.pdf-p6-f7",
    "source": "пр 7.pdf"
  },
  {
    "text": "Для этого предназначены следу - ющие ком анды, которые полностью аналогичны соответствующим командам без буквы «b» (от англ. byte) на конце: команда значение movb cmpb shlb shrb sarb rolb rorb копирование байта сравнение двух байтов логический сдвиг влево логический сдвиг вправо арифметический с двиг вправо циклический сдвиг влево циклический сдвиг вправо",
    "page": 6,
    "fragment_id": "пр 7.pdf-p6-f8",
    "source": "пр 7.pdf"
  },
  {
    "text": "rclb rcrb циклический сдвиг влево через бит переноса циклический сдвиг вправо через бит переноса Команда movb очищает старший байт регистра, в который копируются данные.",
    "page": 7,
    "fragment_id": "пр 7.pdf-p7-f1",
    "source": "пр 7.pdf"
  },
  {
    "text": "Например, ассемблер псевдокод mov 1234, R0 movb 12, R0 R0:= 1234 16 R0:= 12 16 Остальные команды никак не изменяют старший байт регистра -приемника.",
    "page": 7,
    "fragment_id": "пр 7.pdf-p7-f2",
    "source": "пр 7.pdf"
  },
  {
    "text": "Существует специальная команда для обмена старшего и младшего байтов слова: swapb регистр Пример программы: ассемблер псевдокод mov 1234, R0 swapb R0 R0:= 1234 16 R0:= 3412 16 Работа с данными Согласно принципу однородности памяти фон Неймана, данные размещаются в той же обла - сти памяти, что и программа (обычно сразу после команды stop).",
    "page": 7,
    "fragment_id": "пр 7.pdf-p7-f3",
    "source": "пр 7.pdf"
  },
  {
    "text": "В тренажере «ЛамПанель» данные – это 16 -битные слова (вводятся как числа в шестнадцате - ричной системе счисления) или символьные строки, заключенные в двойные кавычки.",
    "page": 7,
    "fragment_id": "пр 7.pdf-p7-f4",
    "source": "пр 7.pdf"
  },
  {
    "text": "Для разме - щения данных в памяти применяется команда data . Например: Для того, чтобы работать с этими данными, нужно как-то к ним обратиться.",
    "page": 7,
    "fragment_id": "пр 7.pdf-p7-f5",
    "source": "пр 7.pdf"
  },
  {
    "text": "Для этого используется косвенная адресация – в регистре находятся не сами данные, а их адрес в памяти.",
    "page": 7,
    "fragment_id": "пр 7.pdf-p7-f6",
    "source": "пр 7.pdf"
  },
  {
    "text": "Рассмотрим пример: ассемблер псевдокод mov @ddd, R0 swapb (R0) add 2, R0 swapb (R0) stop ddd: data 1234 data 5678 R0:= адрес метки ddd переставить байты слова под адресу ddd увеличить адрес на 2 (байта) переставить байты слова под адресу ddd+2 стоп начало блока данных здесь будет 3412 16 здесь будет 7856 16 Запись @метка означает «адрес метки».",
    "page": 7,
    "fragment_id": "пр 7.pdf-p7-f7",
    "source": "пр 7.pdf"
  },
  {
    "text": "Запись (R0) означает «данные, адрес которых находится в R0» – это и есть косвенная адресация. Косвенную адресацию можно использовать и в других командах, работающих с регистрами.",
    "page": 7,
    "fragment_id": "пр 7.pdf-p7-f8",
    "source": "пр 7.pdf"
  },
  {
    "text": "Обработка массивов Пусть в блоке данных, который начинается на метке ddd, записан массив, который нужно обрабо - тать в цикле.",
    "page": 7,
    "fragment_id": "пр 7.pdf-p7-f9",
    "source": "пр 7.pdf"
  },
  {
    "text": "В этом случае удобно использовать косвенную адресацию с автоматическим увеличе - нием адреса.",
    "page": 7,
    "fragment_id": "пр 7.pdf-p7-f10",
    "source": "пр 7.pdf"
  },
  {
    "text": "Запись «(R0)+» означает «работать с данными, адрес которых находится в R0, и после выполнения операции увеличить R0». Если команда рабо тает со словом, R0 увеличится на 2, а если с байтом – на 1.",
    "page": 7,
    "fragment_id": "пр 7.pdf-p7-f11",
    "source": "пр 7.pdf"
  },
  {
    "text": "Пример программы: ассемблер псевдокод mov @ddd, R0 mov 3, R1 loop: swapb (R0)+ sub 1, R1 R0:= адрес метки ddd записать в R1 количество шагов цикла начало цикла переставить байты слова под адресу из R0 уменьшить счетчик оставшихся шагов ... ; основная программа stop ddd: ; метка начала блока данных data 1234 ; слово 1234 16 data 5678 ; слово 5678 16 data \"Ехал Грека через реку\" ; строка",
    "page": 7,
    "fragment_id": "пр 7.pdf-p7-f12",
    "source": "пр 7.pdf"
  },
  {
    "text": "",
    "page": 8,
    "fragment_id": "пр 7.pdf-p8-f1",
    "source": "пр 7.pdf"
  },
  {
    "text": "jnz loop stop ddd: data 1234 data 5678 data 9ABC если счетчик не ноль, перейти в начало цикла стоп начало блока данных здесь будет 3412 16 здесь будет 7856 16 здесь будет BC9A16 Пример программы обработки байтов: ассемблер псевдокод mov @ddd, R0 loop: movb (r0),r1 or 20,r1 movb r1,(r0)+ cmpb 0,(r0) jnz loop stop ddd: data \"ABCD\" R0:= адрес метки ddd начало цикла R1:= байт слова под адресу из R0 из заглавной буквы сделать строчную записать результат в память сравнит ь код следующего байта с 0 если не ноль, перейти в начало цикла стоп начало блока данных здесь будет \"abcd \" Самомодифицирующиеся программы Поскольку данные находятся в той же области памяти, что и программы, программа может изме - нять свой код во время выполнения.",
    "page": 8,
    "fragment_id": "пр 7.pdf-p8-f2",
    "source": "пр 7.pdf"
  },
  {
    "text": "Например, для защиты от взлома может быть использовано шифрование: основной код программы зашифрован, и она сама себя расшифровывает при запуске.",
    "page": 8,
    "fragment_id": "пр 7.pdf-p8-f3",
    "source": "пр 7.pdf"
  },
  {
    "text": "Пример самомодифицирующейся программы: ассемблер псевдокод jmp decode main: data ba6b data ba98 data 27a8 data 4444 decode: mov @main,r0 mov 4,r1 loop: xor bbbb,(r0)+ sub 1, r1 jnz loop jmp main переход на блок расшифровки начало основной части в этом и следующем словах будет \" mov 123, R0\" здесь будет \" system 13\" здесь будет \"stop\" начало блока расшифр овки R0:= начало зашифрованного блока R1:= 4 ; нужно расшифровать 4 слова начало цикла расшифровка: xor с маской BBBB 16 уменьшить счетчик если счетчик не ноль, перейти на начало цикла перейти на основную программу Расширение ПЗУ Пользователь может добавит ь свои подпрограммы в ПЗУ.",
    "page": 8,
    "fragment_id": "пр 7.pdf-p8-f4",
    "source": "пр 7.pdf"
  },
  {
    "text": "Для этого нужно сначала отладить под - программу, а затем сохранить ее в специальном формате с помощью кнопки или пункта меню «Программа – Сохранить как ПЗУ».",
    "page": 8,
    "fragment_id": "пр 7.pdf-p8-f5",
    "source": "пр 7.pdf"
  },
  {
    "text": "Например, напишем подпрограмму, которая переставляет биты числа в обр атном порядке, исполь - зуя циклический сдвиг через бит переноса: ассемблер псевдокод mov 1234, R0 call reverse stop reverse: push R1 push R2 mov 10, R2 xor R1, R1 next-bit: R0:= 1234 16 вызов подпрограммы стоп начало подпрограммы сохранить R1 в стеке сохра нить R2 в стеке R2:= 16 = 10 16 R1:= 0",
    "page": 8,
    "fragment_id": "пр 7.pdf-p8-f6",
    "source": "пр 7.pdf"
  },
  {
    "text": "",
    "page": 9,
    "fragment_id": "пр 7.pdf-p9-f1",
    "source": "пр 7.pdf"
  },
  {
    "text": "rcl 1, R0 rcr 1, R1 sub 1, R2 jnz next -bit mov R1, R0 pop R2 pop R1 ret старший бит R0 попадает в бит переноса бит переноса попадает в старший бит R1 R2:= R2 – 1 если R20, перейти к метке next-bit R0:= R1 восстанови ть R2 из стека восстановить R1 из стека возврат из подпрограммы Отладив эту программу, уберем верхние три строчки, оставив только процедуру, и применяем ко - манду меню «Программа – Сохранить как ПЗУ».",
    "page": 9,
    "fragment_id": "пр 7.pdf-p9-f2",
    "source": "пр 7.pdf"
  },
  {
    "text": "Полученный файл (он будет иметь расширение .rom ) откры ваем в любом текстовом редакторе (например, в Блокноте) и добавляем в начало ком - ментарий: Теперь остается добавить (также в текстовом редакторе) этот фрагмент в конец файла lampanel.rom .",
    "page": 9,
    "fragment_id": "пр 7.pdf-p9-f3",
    "source": "пр 7.pdf"
  },
  {
    "text": "Новая процедура будет доступна при сле дующем запуске программы «ЛамПанель». Практическая часть 1. Составьте программу, после выполнения которой ламповая панель выглядит так 2.",
    "page": 9,
    "fragment_id": "пр 7.pdf-p9-f4",
    "source": "пр 7.pdf"
  },
  {
    "text": "Как вы думаете, что выведет приведенная выше программа, которая вызывает системную процедуру с номером 5? Проверьте ваш ответ с помощью программы ЛамПанель. 3.",
    "page": 9,
    "fragment_id": "пр 7.pdf-p9-f5",
    "source": "пр 7.pdf"
  },
  {
    "text": "Закодируйте изображение домика и выведите его на экран. 4. Напишите программу, которая делает “бегущую строку” из рисунка -домика. Подсказка: ис - пользуйте команды циклического сдвига. 5.",
    "page": 9,
    "fragment_id": "пр 7.pdf-p9-f6",
    "source": "пр 7.pdf"
  },
  {
    "text": "Напишите программу, которая организует “ обратный отсчет” от 100 до 0, а затем выводит рисунок с домиком и останавливается.",
    "page": 9,
    "fragment_id": "пр 7.pdf-p9-f7",
    "source": "пр 7.pdf"
  },
  {
    "text": "Подсказка: для вывода чисел используйте системную подпрограмму с номером 12 16. 6. Используя команду MOV, напишите программу, которая заполнит регистры так, как на ри - сунке.",
    "page": 9,
    "fragment_id": "пр 7.pdf-p9-f8",
    "source": "пр 7.pdf"
  },
  {
    "text": "Не забудьте закончить программу командой STOP Запишите, какие десятичные числа были только что записаны в регистры: ; Перестановка битов R0 ; в обратном порядке ;----------------------- 2E10 PUSH R1 2E20 PUSH R2 01D2 MOV 10, R2 0010 0911 XOR R1, R1 9E00 RCL 1, R0 AE01 RCR 1, R1 03D2 SUB 1, R2 0001 4D0D JNZ 000A FFF4 0110 MOV R1, R0 3E20 POP R2 3E10 POP R1 0D00 RET",
    "page": 9,
    "fragment_id": "пр 7.pdf-p9-f9",
    "source": "пр 7.pdf"
  },
  {
    "text": "7.",
    "page": 10,
    "fragment_id": "пр 7.pdf-p10-f1",
    "source": "пр 7.pdf"
  },
  {
    "text": "Выполните программу SUB 1, R0 NOT R0 STOP при различных начальных значениях регистра R0 и запишите десятичные значения, полученные в R0 после выполнения программы: Какую операцию выполняет этот алгоритм?",
    "page": 10,
    "fragment_id": "пр 7.pdf-p10-f2",
    "source": "пр 7.pdf"
  },
  {
    "text": "8. Используя программу ЛамПанель, вычислите арифметические выражения и запишите ре - зультаты в таблицу. Объясните полученные результаты. Подсказка: 65 535 = FFFF 16, 32 767 = 7FFF 16 9.",
    "page": 10,
    "fragment_id": "пр 7.pdf-p10-f3",
    "source": "пр 7.pdf"
  },
  {
    "text": "Вычисли те приведенные выражения с помощью программы. Запишите в таблицу резуль - таты, значения знакового (старшего) бита полученного числа и битов состояния: 10.",
    "page": 10,
    "fragment_id": "пр 7.pdf-p10-f4",
    "source": "пр 7.pdf"
  },
  {
    "text": "С помощью программы, приведенной в теоретической части, вычислите сумму натуральных чисел от 1 до 100. 11.",
    "page": 10,
    "fragment_id": "пр 7.pdf-p10-f5",
    "source": "пр 7.pdf"
  },
  {
    "text": "Напишите программу, которая вычисляет значение факториала — произведения всех нату - ральных чисел от 1 до заданного числа. Например, факториал числа 5 равен 5! = 1х2х3х4х5.",
    "page": 10,
    "fragment_id": "пр 7.pdf-p10-f6",
    "source": "пр 7.pdf"
  },
  {
    "text": "С помощью программы заполните таблицу: Объясните полученные результаты. 12.",
    "page": 10,
    "fragment_id": "пр 7.pdf-p10-f7",
    "source": "пр 7.pdf"
  },
  {
    "text": "Напишите программу, которая решает следующую задачу, используя логические операции: В регистрах R1, R2 и R3 записаны коды трех десятичных цифр, составляющих трехзначное число (соответственно сотни, десятки и единицы).",
    "page": 10,
    "fragment_id": "пр 7.pdf-p10-f8",
    "source": "пр 7.pdf"
  },
  {
    "text": "Построить в регистре R0 это число. Например, ес ли R1=31 16, R2=32 16 и R3=33 16, в регистре R0 должно получиться десятичное число 123. 13.",
    "page": 10,
    "fragment_id": "пр 7.pdf-p10-f9",
    "source": "пр 7.pdf"
  },
  {
    "text": "Используя программу ЛамПанель, определите и запишите в таблицу значения регистра R0 после выполнения каждой из следующих команд , которые выполняются последовательно:",
    "page": 10,
    "fragment_id": "пр 7.pdf-p10-f10",
    "source": "пр 7.pdf"
  },
  {
    "text": "14.",
    "page": 11,
    "fragment_id": "пр 7.pdf-p11-f1",
    "source": "пр 7.pdf"
  },
  {
    "text": "Запишите в таблицу десятичные числа, которые будут получены в регистре R0 после выпол - нения каждой команды этой программы при разных начальных значениях R0 (две команды выполняются последовательно одна за другой): В каком случае последовательное выполнени е этих двух команд не изменяет данные?",
    "page": 11,
    "fragment_id": "пр 7.pdf-p11-f2",
    "source": "пр 7.pdf"
  },
  {
    "text": "15.",
    "page": 11,
    "fragment_id": "пр 7.pdf-p11-f3",
    "source": "пр 7.pdf"
  },
  {
    "text": "Напишите программу, которая решает следующую задачу, используя логические операции и сдвиги: При кодировании цвета используются 4 -битные значения составляющих R (красная), G (зе - леная) и B (синяя).",
    "page": 11,
    "fragment_id": "пр 7.pdf-p11-f4",
    "source": "пр 7.pdf"
  },
  {
    "text": "Коды этих составля ющих записаны в регистрах R1, R2 и R3. Построить в регистре R0 полный код цвета. Например, если R1 = A16, R2 = B16 и R3 = C16, в регистре R0 должно получиться число ABC 16 16.",
    "page": 11,
    "fragment_id": "пр 7.pdf-p11-f5",
    "source": "пр 7.pdf"
  },
  {
    "text": "Напишите программу, которая умножает число в регистре R0 на 10, не применяя команду умножения. Используйте арифметические операции и сдвиги.",
    "page": 11,
    "fragment_id": "пр 7.pdf-p11-f6",
    "source": "пр 7.pdf"
  },
  {
    "text": "Самостоятельная работа Заполните таблицу обозначение элементов и команд программы Элемент Назначение Принадлеж - ность R0, R1, R2, R3 PC; PS SP Команда NOP STOP MOV ADD SUB CMP MUL DIV NOT AND OR XOR SHL SHR SAR ROL ROR RCL RCR JMP JGE SYSTEM CALL RET",
    "page": 11,
    "fragment_id": "пр 7.pdf-p11-f7",
    "source": "пр 7.pdf"
  }
]